package it.polimi.ingsw.client.view;

import it.polimi.ingsw.client.Client;
import it.polimi.ingsw.client.SendMessageToServer;
import it.polimi.ingsw.client.handlers.PlayerHandler;
import it.polimi.ingsw.client.handlers.ProductionPowersHandler;
import it.polimi.ingsw.client.handlers.ResourceMarketHandler;
import it.polimi.ingsw.client.view.CustomSwing.*;
import it.polimi.ingsw.messages.*;
import it.polimi.ingsw.server.Model.ActionToken;
import it.polimi.ingsw.server.Model.Cards.DevelopmentCard;
import it.polimi.ingsw.server.Model.Cards.LeaderCard;
import it.polimi.ingsw.server.Model.Cards.ProductionPower;
import it.polimi.ingsw.server.Model.Enums.*;
import it.polimi.ingsw.server.Model.FaithTrack.FaithTrack;
import it.polimi.ingsw.server.Model.PersonalBoard.DevelopmentSlots;
import it.polimi.ingsw.server.Model.PersonalBoard.Strongbox;
import it.polimi.ingsw.server.Model.PersonalBoard.Warehouse.Depot;
import it.polimi.ingsw.server.Model.PersonalBoard.Warehouse.Warehouse;
import it.polimi.ingsw.server.Model.Requirements.Requirement;
import it.polimi.ingsw.server.Model.Table.CardMarket.CardDeck;
import it.polimi.ingsw.utils.ImageUtil;
import it.polimi.ingsw.utils.StringUtils;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.util.List;
import java.util.*;

import static it.polimi.ingsw.utils.ImageUtil.getScaledImage;

public class GUIView implements View {
    protected static final int MIN_PORT_NUMBER = 1024;
    protected static final int MAX_PORT_NUMBER = 65535;
    private static final CustomFrame gameFrame = new CustomFrame();
    private static Object Graphics;
    private final int MIN_PLAYER_NUMBER = 1;
    private final int MAX_PLAYER_NUMBER = 4;
    private final String DEFAULT_IP_ADDRESS = "127.0.0.1";
    private final int DEFAULT_PORT_NUMBER = 4687;
    private final int MIN_LEADER_CARD_TO_CHOOSE = 1;
    private final int MAX_LEADER_CARD_TO_CHOOSE = 4;
    private final ArrayList<ImageIcon> images = new ArrayList<>();
    private int connectedIndex;
    /**
     * Used to send messages to the server when a new event is generated by the user
     */
    private SendMessageToServer sendToServer;

    public GUIView() {
        SwingUtilities.invokeLater(GUIView::createAndShowGUI);
    }

    private static void createAndShowGUI() {
        System.out.println("Created GUI on EDT? " +
                SwingUtilities.isEventDispatchThread());
        gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        gameFrame.setVisible(true);
    }

    @Override
    public int getConnectedIndex() {
        return connectedIndex;
    }

    public void setSendToServer(SendMessageToServer sendToServer) {
        this.sendToServer = sendToServer;
    }

    @Override
    public String askIpAddress() {
        gameFrame.setIPAddressFieldVisible(DEFAULT_IP_ADDRESS);
        return null;
    }

    @Override
    public int askPortNumber() {
        gameFrame.setPortNumberFieldVisible(DEFAULT_PORT_NUMBER);
        return 0;
    }

    @Override
    public boolean askRetry() {
        boolean retry = false;
        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        JPanel contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());

        GridBagConstraints gbc;

        JLabel lblNewLabel = new JLabel("Cannot connect to server :\\");
        lblNewLabel.setFont(new Font("Times New Roman", Font.PLAIN, 46));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.gridheight = 1;
        gbc.weighty = 0.3;
        gbc.weightx = 0.3;
        contentPane.add(lblNewLabel, gbc);


        JLabel label = new JLabel("Do you want to try again?");
        label.setFont(new Font("Tahoma", Font.PLAIN, 31));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.gridheight = 1;
        gbc.weighty = 0.3;
        gbc.weightx = 0.3;
        contentPane.add(label, gbc);


        JPanel btnYes = new JPanel();
        btnYes.add(new JButton("YES") {{
            setPreferredSize(new Dimension(200, 80));
            addActionListener(e -> {
                Client.setRetry();
                synchronized (Client.WAIT_FOR_RETRY) {
                    Client.WAIT_FOR_RETRY.notify();
                }
            });
        }});
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.gridheight = 1;
        gbc.weighty = 1;
        gbc.weightx = 1;
        gbc.anchor = GridBagConstraints.CENTER;
        contentPane.add(btnYes, gbc);

        JPanel btnNo = new JPanel();
        btnYes.add(new JButton("NO") {{
            setPreferredSize(new Dimension(200, 80));
            addActionListener(e -> {
                System.exit(0);
            });
        }});
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.gridheight = 1;
        gbc.weighty = 1;
        gbc.weightx = 1;
        gbc.anchor = GridBagConstraints.CENTER;
        contentPane.add(btnNo, gbc);


        gameFrame.setContentPane(contentPane);
        gameFrame.validate();
        gameFrame.repaint();
        gameFrame.setVisible(true);
        return retry;
    }

    @Override
    public void askNPlayer() {
        gameFrame.setBackground(new Color(255, 231, 163));

        Container contain = gameFrame.getContentPane();
        contain.removeAll();

        JPanel pane = new JPanel(new GridBagLayout()) {{
            setOpaque(false);
        }};
        NumberOfPlayersPanel numberOfPlayersPanel = new NumberOfPlayersPanel();
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        pane.add(numberOfPlayersPanel, gbc);

        JPanel buttonPane = new JPanel();
        JButton button = new JButton("Send");

        Action sendNPlayer = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String answer = numberOfPlayersPanel.getNumberOfPlayer();
                if (StringUtils.isNumeric(answer)) {
                    int number = Integer.parseInt(answer);
                    if (number >= MIN_PLAYER_NUMBER && number <= MAX_PLAYER_NUMBER) {
                        sendToServer.sendNPlayer(number);
                        button.setEnabled(false);
                        numberOfPlayersPanel.removeListenerFromTextField();
//                        button.removeActionListener(this);
                    } else {
                        numberOfPlayersPanel.setNumberOfPlayers("");
                        JOptionPane.showMessageDialog(gameFrame,
                                "Number invalid. Retry",
                                "Warning",
                                JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    numberOfPlayersPanel.setNumberOfPlayers("");
                    JOptionPane.showMessageDialog(gameFrame,
                            "Number invalid. Retry",
                            "Warning",
                            JOptionPane.WARNING_MESSAGE);
                }
            }
        };

        button.addActionListener(sendNPlayer);
        buttonPane.add(button);

        numberOfPlayersPanel.setTextFieldListener(sendNPlayer);

        gbc = new GridBagConstraints();
        gbc.gridy = 1;
        gbc.gridx = 0;

        pane.add(buttonPane, gbc);

        gameFrame.setContentPane(pane);

        gameFrame.validate();
        gameFrame.setVisible(true);
    }

    @Override
    public void askName(AskName m) {
        gameFrame.setBackground(new Color(255, 231, 163));
        Container contain = gameFrame.getContentPane();
        contain.removeAll();

        if (!m.isAgain()) {
            JOptionPane.showMessageDialog(gameFrame,
                    "LOBBY COMPLETE !",
                    "LET'S GO",
                    JOptionPane.PLAIN_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(gameFrame,
                    "THAT NICKNAME IS ALREADY TAKEN, PLEASE CHOOSE ANOTHER ONE.",
                    "SORRY",
                    JOptionPane.WARNING_MESSAGE);
        }

        JPanel pane = new JPanel(new GridBagLayout()) {{
            setOpaque(false);
        }};
        GridBagConstraints gbc = new GridBagConstraints();
        NamePlayerPanel namePlayerPanel = new NamePlayerPanel();

        Action sendName = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String answer = namePlayerPanel.getNamePlayerText();
                if (answer.isEmpty() || answer.isBlank()) {
                    namePlayerPanel.setNamePlayerText("");
                    JOptionPane.showMessageDialog(gameFrame,
                            "NAME INVALID, PLEASE RETRY",
                            "ATTENTION",
                            JOptionPane.WARNING_MESSAGE);
                } else {
                    if (m.getReconnectedPlayerIndex() != -1)
                        sendToServer.sendReconnectedName(answer, m.getReconnectedPlayerIndex());
                    else sendToServer.sendName(answer);
                }
            }
        };

        namePlayerPanel.setTextFieldListener(sendName);
        gbc.gridx = 0;
        gbc.gridy = 0;
        pane.add(namePlayerPanel, gbc);

        JPanel button = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        button.add(new JButton("Send") {{
            addActionListener(sendName);
        }});
        pane.add(button, gbc);

        gameFrame.setContentPane(pane);

        gameFrame.validate();
        gameFrame.repaint();
        gameFrame.setVisible(true);

    }

    @Override
    public void showWelcome(int connectedIndex) {
        this.connectedIndex = connectedIndex;
        int number = connectedIndex + 1;
        JOptionPane.showMessageDialog(gameFrame,
                "WELCOME TO MAESTRI DEL RINASCIMENTO.YOU'RE THE PLAYER NUMBER " + number,
                "HELLO",
                JOptionPane.INFORMATION_MESSAGE);

    }

    @Override
    public void showFull() {
        JOptionPane.showMessageDialog(gameFrame,
                "SERVER SAYS THE LOBBY IS ALREADY FULL :(",
                "SORRY",
                JOptionPane.ERROR_MESSAGE);
        sendToServer.sendCloseConnection();

    }

    @Override
    public void showWait(int connectedPlayers, int totalPlayers) {
        String popUpMessage;
        if (connectedPlayers != -1)
            popUpMessage = "Waiting for the lobby to complete... (" + connectedPlayers + "/" + totalPlayers + ")";
        else popUpMessage = "Waiting for the lobby to complete...";
        JOptionPane.showMessageDialog(gameFrame,
                popUpMessage,
                "Please wait",
                JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showConnectionClosed() {
        JOptionPane.showMessageDialog(gameFrame,
                "Connection correctly closed.",
                "Please wait",
                JOptionPane.ERROR_MESSAGE);
        sendToServer.sendCloseConnection();
    }

    @Override
    public void chooseLeaderCards(List<LeaderCard> leaderCards) {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();

        JPanel panelContainer = new JPanel(new GridBagLayout());
        ChooseLeaderCardsPanel chooseLeaderCardsPanel = new ChooseLeaderCardsPanel(leaderCards);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;

        gbc.weighty = 0.9;
        gbc.weightx = 0.9;

        panelContainer.add(chooseLeaderCardsPanel, gbc);


        JPanel button = new JPanel();
        button.add(new JButton("confirm") {{
            setPreferredSize(new Dimension(150, 60));
            addActionListener(e -> {
                List<Integer> chosenCards = chooseLeaderCardsPanel.getChosenCards();
                if (chosenCards.size() == 2) {
                    int[] chosen = new int[2];
                    chosen[0] = chosenCards.get(0);
                    chosen[1] = chosenCards.get(1);
                    sendToServer.sendChosenCard(chosen);

                } else {
                    JOptionPane.showMessageDialog(gameFrame,
                            (chosenCards.size() < 2 ? "You have to choose at least two cards" : "You have to choose max two cards, please deselect any"),
                            "Warning",
                            JOptionPane.WARNING_MESSAGE);
                }
            });
        }});
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;

        gbc.weighty = 0.1;
        gbc.weightx = 0.1;
        gbc.ipadx = 30;
        gbc.ipady = 20;
        panelContainer.add(button, gbc);
        gameFrame.setContentPane(panelContainer);
        gameFrame.validate();
        gameFrame.repaint();
        gameFrame.setVisible(true);
    }

    @Override
    public void askInitialResources(int playerIndex, int nResources, int nFaithPoints, Warehouse warehouse) {
        if (nResources == 0) {
            JOptionPane.showMessageDialog(gameFrame,
                    "As the first player, you have no initial resources and no initial faith points given.",
                    "HELLO",
                    JOptionPane.INFORMATION_MESSAGE);
            sendToServer.sendReady();
        } else {
            EnumMap<ResourceEnum, Integer> chosenResources = new EnumMap<>(ResourceEnum.class);
            ResourceEnum[] resources = Arrays.copyOfRange(ResourceEnum.values(), 0, 4);

            GridBagConstraints gbc;
            JLabel info;
            JDialog askInitialResourcesDialog = new JDialog(gameFrame, "Select the initial resources", Dialog.ModalityType.APPLICATION_MODAL);
            askInitialResourcesDialog.setLayout(new GridBagLayout());

            final int[] leftToChoose = {nResources};

            if (nFaithPoints != 0) {
                info = new JLabel("Since you're the player number " + (playerIndex + 1)
                        + " you have " + nFaithPoints +
                        " initial faith point(s)\n" + "and you have to choose " +
                        leftToChoose[0] + " resource(s), and insert them in your warehouse");
            } else {
                info = new JLabel("Since you're the player number " + (playerIndex + 1)
                        + " you have " + "to choose " + leftToChoose[0] +
                        " resource(s), and insert them in your warehouse.");
            }

            class ChooseInitialResourceAction extends AbstractAction {
                private final ResourceEnum resourceSelected;

                public ChooseInitialResourceAction(ResourceEnum resourceSelected) {
                    this.resourceSelected = resourceSelected;
                }

                @Override
                public void actionPerformed(ActionEvent e) {
                    if (chosenResources.containsKey(resourceSelected))
                        chosenResources.put(resourceSelected, chosenResources.get(resourceSelected) + 1);
                    else chosenResources.put(resourceSelected, 1);
                    leftToChoose[0]--;
                    if (leftToChoose[0] == 0) {
                        sendToServer.sendInitialResources(chosenResources);
                        askInitialResourcesDialog.dispose();
                        askInsertWarehouse(chosenResources, warehouse);
                    } else {
                        info.setText("you have to select " + leftToChoose[0] + " other resource(s)");
                        askInitialResourcesDialog.revalidate();
                    }
                }
            }

            gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 0;

            askInitialResourcesDialog.add(info, gbc);

            JPanel resourcesPane = new JPanel(new GridBagLayout());
            ImageIcon icon = null;
            JLabel iconLabel;
            JButton chosenResourceButton;
            Action action;


            for (int i = 0; i < resources.length; i++) {
                try {
                    icon = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/" + resources[i].toString().toLowerCase() + ".jpg"))));
                    icon = new ImageIcon(getScaledImage(icon.getImage(), 55, 55));
                } catch (IOException e) {
                    e.printStackTrace();
                }

                chosenResourceButton = new JButton();
                chosenResourceButton.setLayout(new GridBagLayout());
                chosenResourceButton.setContentAreaFilled(false);

                action = new ChooseInitialResourceAction(resources[i]);
                chosenResourceButton.addActionListener(action);

                gbc = new GridBagConstraints();
                gbc.gridx = 0;
                gbc.gridy = 0;
                iconLabel = new JLabel(icon);

                chosenResourceButton.add(iconLabel, gbc);

                gbc = new GridBagConstraints();
                gbc.gridx = i;
                gbc.gridy = 0;

                resourcesPane.add(chosenResourceButton, gbc);
            }

            Border innerEmptyBorder = new EmptyBorder(10, 0, 40, 0);
            resourcesPane.setBorder(innerEmptyBorder);

            gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 1;

            askInitialResourcesDialog.add(resourcesPane, gbc);
            askInitialResourcesDialog.pack();
            askInitialResourcesDialog.setVisible(true);
        }
    }

//    @Override
//    public void askInitialResources(int nResources, int nFaithPoints, Warehouse warehouse) {
//        EnumMap<ResourceEnum, Integer> chosenResources = new EnumMap<>(ResourceEnum.class);
//        Container contain = gameFrame.getContentPane();
//        contain.removeAll();
//        JPanel contentPane = new JPanel();
//
//        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
//
//        contentPane.setLayout(null);
//
//        if (nResources == 0) {
//            JOptionPane.showMessageDialog(gameFrame,
//                    "As the first player, you have no initial resources and no initial faith points given.",
//                    "HELLO",
//                    JOptionPane.INFORMATION_MESSAGE);
//            sendToServer.sendReady();
//        } else {
//            if (nFaithPoints != 0) {
//                JOptionPane.showMessageDialog(gameFrame,
//                        "Since you're the player number " + (connectedIndex + 1) + " you have " + nFaithPoints + " initial faith point(s)\n" + "and you have to choose " + nResources + " resource(s), and insert them in your warehouse",
//                        "HELLO",
//                        JOptionPane.INFORMATION_MESSAGE);
//
//            } else {
//                JOptionPane.showMessageDialog(gameFrame,
//                        "Since you're the player number " + (connectedIndex + 1) + " you have " + "to choose " + nResources + " resource(s), and insert them in your warehouse.",
//                        "HELLO",
//                        JOptionPane.INFORMATION_MESSAGE);
//
//                ResourceEnum[] resourceEnums = Arrays.copyOfRange(ResourceEnum.values(), 0, 4);
//            }
//
//            final int[] i = {0};
//
//            String[] s1 = {String.valueOf(ResourceEnum.SHIELD), String.valueOf(ResourceEnum.SERVANT), String.valueOf(ResourceEnum.COIN), String.valueOf(ResourceEnum.STONE)};
//
//
//            JLabel l = new JLabel("Select a resource ");
//            l.setForeground(Color.BLACK);
//            l.setBackground(Color.CYAN);
//            l.setFont(new Font("Tahoma", Font.PLAIN, 25));
//            l.setBounds(80, 200, 393, 52);
//            contentPane.add(l);
//            JComboBox c1 = new JComboBox(s1);
//            c1.setBounds(500, 200, 293, 52);
//
//
//            contentPane.add(c1);
//            JButton btnNewButton = new JButton("Done");
//            btnNewButton.setFont(new Font("Tahoma", Font.PLAIN, 26));
//            btnNewButton.setBounds(745, 300, 162, 73);
//            btnNewButton.addActionListener(e -> {
//
//                if (i[0] < nResources - 1) {
//                    i[0]++;
//                    btnNewButton.setSelected(false);
//                    ResourceEnum chosenResource = ResourceEnum.valueOf((String) c1.getSelectedItem());
//                    if (chosenResources.containsKey(chosenResource)) {
//                        chosenResources.replace(chosenResource, chosenResources.get(chosenResource) + 1);
//                    } else {
//                        chosenResources.put(chosenResource, 1);
//                    }
//                    if (nResources - i[0] == 1) {
//                        l.setText("Select your last resource ");
//                    }
//
//                } else {
//                    btnNewButton.setVisible(false);
//                    c1.setEditable(false);
//                    ResourceEnum chosenResource = ResourceEnum.valueOf((String) c1.getSelectedItem());
//                    if (chosenResources.containsKey(chosenResource)) {
//                        chosenResources.replace(chosenResource, chosenResources.get(chosenResource) + 1);
//                    } else {
//                        chosenResources.put(chosenResource, 1);
//                    }
//                    System.out.println(chosenResources);
//                    sendToServer.sendInitialResources(chosenResources);
//                    askInsertWarehouse(chosenResources, warehouse);
//                }
//
//
//            });
//            contentPane.add(btnNewButton);
//
//            gameFrame.setContentPane(contentPane);
//            gameFrame.validate();
//            gameFrame.repaint();
//            gameFrame.setVisible(true);
//
//        }
//    }

    @Override
    public void askInsertWarehouse(EnumMap<ResourceEnum, Integer> resources, Warehouse warehouse) {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        JPanel container = new JPanel(new BorderLayout());

        JPanel panelTitle = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1;
        gbc.weighty = 1;
        JLabel title = new JLabel("Handle Resources and insert into the warehouse");
        panelTitle.add(title, gbc);
        container.add(panelTitle, BorderLayout.PAGE_START);

        WarehousePanel wareHousePanel = new WarehousePanel(warehouse);
        container.add(wareHousePanel, BorderLayout.LINE_START);

        ArrayList<Depot> depots = warehouse.getDepots();
        ResourceEnum[] resourceEnums;
        final ResourceEnum[] selectedResource = {ResourceEnum.NONE};

        JPanel panelButtonsResources = new JPanel(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.gridheight = 1;
        gbc.weightx = 0.1;
        gbc.weighty = 0.1;
        JLabel titleButtons = new JLabel("Select ONE resource to insert");
        panelButtonsResources.add(titleButtons, gbc);


        resourceEnums = showNewResources(resources);

        for (int i = 0; i < resourceEnums.length; i++) {
            gbc = new GridBagConstraints();
            GridBagConstraints gbcCountResource = new GridBagConstraints();
            JButton buttonResource = new JButton();
            buttonResource.setBorderPainted(false);
            buttonResource.setContentAreaFilled(false);
            buttonResource.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

            int countRes = 0;

            if (resourceEnums[i].equals(ResourceEnum.SHIELD)) {
                ImageIcon image = null;
                try {
                    image = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/shield.jpg"))));
                    image = new ImageIcon(getScaledImage(image.getImage(), 80, 110));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                buttonResource.setIcon(image);
                countRes = resources.get(ResourceEnum.SHIELD);

                buttonResource.addActionListener(e -> {
                    if (selectedResource[0].equals(ResourceEnum.NONE)) {
                        selectedResource[0] = ResourceEnum.SHIELD;
                        buttonResource.setContentAreaFilled(true);
                        buttonResource.setBackground(Color.YELLOW);
                    } else {
                        if (selectedResource[0].equals(ResourceEnum.SHIELD)) {
                            selectedResource[0] = ResourceEnum.NONE;
                            buttonResource.setContentAreaFilled(false);
                        } else {
                            JOptionPane.showMessageDialog(gameFrame,
                                    "There is another resource already selected, please deselect it before",
                                    "Warning",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                    }
                });


            }
            if (resourceEnums[i].equals(ResourceEnum.STONE)) {
                ImageIcon image = null;
                try {
                    image = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/stone.jpg"))));
                    image = new ImageIcon(getScaledImage(image.getImage(), 80, 110));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                buttonResource.setIcon(image);
                countRes = resources.get(ResourceEnum.STONE);

                buttonResource.addActionListener(e -> {
                    if (selectedResource[0].equals(ResourceEnum.NONE)) {
                        selectedResource[0] = ResourceEnum.STONE;
                        buttonResource.setContentAreaFilled(true);
                        buttonResource.setBackground(Color.YELLOW);
                    } else {
                        if (selectedResource[0].equals(ResourceEnum.STONE)) {
                            selectedResource[0] = ResourceEnum.NONE;
                            buttonResource.setContentAreaFilled(false);
                        } else {
                            JOptionPane.showMessageDialog(gameFrame,
                                    "There is another resource already selected, please deselect it before",
                                    "Warning",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                    }
                });
            }
            if (resourceEnums[i].equals(ResourceEnum.SERVANT)) {
                ImageIcon image = null;
                try {
                    image = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/servant.jpg"))));
                    image = new ImageIcon(getScaledImage(image.getImage(), 80, 110));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                buttonResource.setIcon(image);
                countRes = resources.get(ResourceEnum.SERVANT);

                buttonResource.addActionListener(e -> {
                    if (selectedResource[0].equals(ResourceEnum.NONE)) {
                        selectedResource[0] = ResourceEnum.SERVANT;
                        buttonResource.setContentAreaFilled(true);
                        buttonResource.setBackground(Color.YELLOW);
                    } else {
                        if (selectedResource[0].equals(ResourceEnum.SERVANT)) {
                            selectedResource[0] = ResourceEnum.NONE;
                            buttonResource.setContentAreaFilled(false);
                        } else {
                            JOptionPane.showMessageDialog(gameFrame,
                                    "There is another resource already selected, please deselect it before",
                                    "Warning",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                    }
                });
            }
            if (resourceEnums[i].equals(ResourceEnum.COIN)) {
                ImageIcon image = null;
                try {
                    image = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/coin.jpg"))));
                    image = new ImageIcon(getScaledImage(image.getImage(), 80, 110));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                buttonResource.setIcon(image);
                countRes = resources.get(ResourceEnum.COIN);

                buttonResource.addActionListener(e -> {
                    if (selectedResource[0].equals(ResourceEnum.NONE)) {
                        selectedResource[0] = ResourceEnum.COIN;
                        buttonResource.setContentAreaFilled(true);
                        buttonResource.setBackground(Color.YELLOW);
                    } else {
                        if (selectedResource[0].equals(ResourceEnum.COIN)) {
                            selectedResource[0] = ResourceEnum.NONE;
                            buttonResource.setContentAreaFilled(false);
                        } else {
                            JOptionPane.showMessageDialog(gameFrame,
                                    "There is another resource already selected, please deselect it before",
                                    "Warning",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                    }
                });
            }


            switch (i) {
                case 0:
                    gbc.gridx = 0;
                    gbc.gridy = 1;
                    gbc.weightx = 0.25;
                    gbc.weighty = 0.25;
                    gbc.insets = new Insets(3, 2, 3, 2);

                    gbcCountResource.gridx = 1;
                    gbcCountResource.gridy = 1;
                    gbcCountResource.weightx = 0.2;
                    gbcCountResource.weighty = 0.2;


                    break;
                case 1:
                    gbc.gridx = 0;
                    gbc.gridy = 2;
                    gbc.weightx = 0.25;
                    gbc.weighty = 0.25;
                    gbc.insets = new Insets(3, 2, 3, 2);

                    gbcCountResource.gridx = 1;
                    gbcCountResource.gridy = 2;
                    gbcCountResource.weightx = 0.2;
                    gbcCountResource.weighty = 0.2;
                    break;
                case 2:
                    gbc.gridx = 0;
                    gbc.gridy = 3;
                    gbc.weightx = 0.25;
                    gbc.weighty = 0.25;
                    gbc.insets = new Insets(3, 2, 3, 2);

                    gbcCountResource.gridx = 1;
                    gbcCountResource.gridy = 3;
                    gbcCountResource.weightx = 0.2;
                    gbcCountResource.weighty = 0.2;
                    break;
                case 3:
                    gbc.gridx = 0;
                    gbc.gridy = 4;
                    gbc.weightx = 0.25;
                    gbc.weighty = 0.25;
                    gbc.insets = new Insets(3, 2, 3, 2);

                    gbcCountResource.gridx = 1;
                    gbcCountResource.gridy = 4;
                    gbcCountResource.weightx = 0.2;
                    gbcCountResource.weighty = 0.2;
                    break;
            }

            panelButtonsResources.add(buttonResource, gbc);
            JLabel labelCountRes = new JLabel("x" + countRes);
            panelButtonsResources.add(labelCountRes, gbcCountResource);
        }

        container.add(panelButtonsResources, BorderLayout.CENTER);

        JPanel panelButtonChoiceDepot = new JPanel(new GridBagLayout());

        gbc = new GridBagConstraints();
        gbc.ipadx = 40;
        gbc.ipady = 20;
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.01;
        JLabel labelDepots = new JLabel("Select depot to insert");
        panelButtonChoiceDepot.add(labelDepots, gbc);

        gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 40;
        gbc.ipady = 20;
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 0.3;
        gbc.insets = new Insets(3, 0, 3, 8);


        JButton d1 = new JButton("Depot 1");
        d1.addActionListener(e -> {
            Depot chosenDepot = depots.get(0);
            ResourceEnum depotResource = chosenDepot.getResource();
            if (!selectedResource[0].equals(ResourceEnum.NONE)) {
                if (depotResource == ResourceEnum.NONE || depotResource.equals(selectedResource[0])) {
                    sendToServer.sendTryInsert(selectedResource[0], resources.get(selectedResource[0]), 0);
                } else {
                    JOptionPane.showMessageDialog(gameFrame,
                            "The depot is already occupied by another resource,please retry.",
                            "ALT",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(gameFrame,
                        "Please select one resource before",
                        "ALT",
                        JOptionPane.ERROR_MESSAGE);
            }


        });
        panelButtonChoiceDepot.add(d1, gbc);

        gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 40;
        gbc.ipady = 20;
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 0.3;
        gbc.insets = new Insets(3, 0, 3, 8);

        JButton d2 = new JButton("Depot 2");
        d2.addActionListener(e -> {
            Depot chosenDepot = depots.get(1);
            ResourceEnum depotResource = chosenDepot.getResource();
            if (!selectedResource[0].equals(ResourceEnum.NONE)) {
                if (depotResource == ResourceEnum.NONE || depotResource.equals(selectedResource[0])) {
                    sendToServer.sendTryInsert(selectedResource[0], resources.get(selectedResource[0]), 1);
                } else {
                    JOptionPane.showMessageDialog(gameFrame,
                            "The depot is already occupied by another resource,please retry.",
                            "ALT",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(gameFrame,
                        "Please select one resource before",
                        "ALT",
                        JOptionPane.ERROR_MESSAGE);
            }
        });
        panelButtonChoiceDepot.add(d2, gbc);


        gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 40;
        gbc.ipady = 20;
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 0.3;
        gbc.insets = new Insets(3, 0, 3, 8);

        JButton d3 = new JButton("Depot 3");
        d3.addActionListener(e -> {
            Depot chosenDepot = depots.get(2);
            ResourceEnum depotResource = chosenDepot.getResource();
            if (!selectedResource[0].equals(ResourceEnum.NONE)) {
                if (depotResource == ResourceEnum.NONE || depotResource == selectedResource[0]) {
                    sendToServer.sendTryInsert(selectedResource[0], resources.get(selectedResource[0]), 2);
                } else {
                    JOptionPane.showMessageDialog(gameFrame,
                            "The depot is already occupied by another resource,please retry.",
                            "ALT",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(gameFrame,
                        "Please select one resource before",
                        "ALT",
                        JOptionPane.ERROR_MESSAGE);
            }
        });
        panelButtonChoiceDepot.add(d3, gbc);


        gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 40;
        gbc.ipady = 20;
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.weightx = 0.3;
        gbc.insets = new Insets(3, 0, 3, 8);

        JButton d4 = new JButton("Go Back");
        d4.addActionListener(e -> {
            showMenuHandleNewResourcesFromMarket(resources, warehouse);
        });
        panelButtonChoiceDepot.add(d4, gbc);

        container.add(panelButtonChoiceDepot, BorderLayout.LINE_END);
        gameFrame.setContentPane(container);
        gameFrame.validate();
        gameFrame.repaint();
        gameFrame.setVisible(true);
    }

    private ResourceEnum[] showNewResources(EnumMap<ResourceEnum, Integer> newResources) {
        ResourceEnum[] resourceEnums = new ResourceEnum[newResources.size()];

        int i = 1;
        for (Map.Entry<ResourceEnum, Integer> entry : newResources.entrySet()) {
            resourceEnums[i - 1] = entry.getKey();
            i++;
        }
        return resourceEnums;
    }

    @Override
    public void askHandleNewResourceOrSwap(EnumMap<ResourceEnum, Integer> resources, Warehouse warehouse) {
        ResourceMarketHandler.setToInsert(resources);

        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        JPanel container = new JPanel();
        container.setLayout(new BorderLayout());


        if (resources.isEmpty()) {


            gameFrame.setContentPane(container);
            gameFrame.validate();
            gameFrame.repaint();
            gameFrame.setVisible(true);

            JOptionPane.showMessageDialog(gameFrame,
                    "All resources have been inserted",
                    "Information",
                    JOptionPane.INFORMATION_MESSAGE);
            showEndTurnMoves();
        } else {
            if (resources.containsKey(ResourceEnum.NONE)) {
                JLabel title = new JLabel("Handle the white marble with your leader car powers");
                container.add(title, BorderLayout.PAGE_START);

                PanelWhiteMarbleAndCount panelWhiteMarbleAndCount = new PanelWhiteMarbleAndCount();
                JLabel countWhiteMarble = new JLabel("x" + resources.get(ResourceEnum.NONE));
                GridBagConstraints gbc = new GridBagConstraints();
                gbc.gridx = 1;
                gbc.gridy = 0;
                panelWhiteMarbleAndCount.add(countWhiteMarble, gbc);
                container.add(panelWhiteMarbleAndCount, BorderLayout.LINE_START);

                PanelChooseConvertMarbleLeaderCard panelChooseConvertMarbleLeaderCard = new PanelChooseConvertMarbleLeaderCard(playerHandler);


                JButton swapMarble1 = new JButton();
                JButton swapMarble2 = new JButton();
                gbc = new GridBagConstraints();

                try {
                    String nameFileMarble1;
                    if (playerHandler.getWhiteMarbleLeaderAbility().get(0).equals(ResourceEnum.SHIELD)) {
                        nameFileMarble1 = "blue_marble.jpg";
                    } else {
                        if (playerHandler.getWhiteMarbleLeaderAbility().get(0).equals(ResourceEnum.SERVANT)) {
                            nameFileMarble1 = "purple_marble.jpg";
                        } else {
                            if (playerHandler.getWhiteMarbleLeaderAbility().get(0).equals(ResourceEnum.COIN)) {
                                nameFileMarble1 = "yellow_marble.jpg";
                            } else {
                                nameFileMarble1 = "gray_marble.jpg";
                            }
                        }
                    }
                    ImageIcon image = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/" + nameFileMarble1))));
                    image = new ImageIcon(getScaledImage(image.getImage(), 200, 250));
                    swapMarble1.setIcon(image);
                    swapMarble1.setBorderPainted(false);
                    swapMarble1.setContentAreaFilled(false);
                    swapMarble1.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));


                    String nameFileMarble2;
                    if (playerHandler.getWhiteMarbleLeaderAbility().get(1).equals(ResourceEnum.SHIELD)) {
                        nameFileMarble2 = "blue_marble.jpg";
                    } else {
                        if (playerHandler.getWhiteMarbleLeaderAbility().get(1).equals(ResourceEnum.SERVANT)) {
                            nameFileMarble2 = "purple_marble.jpg";
                        } else {
                            if (playerHandler.getWhiteMarbleLeaderAbility().get(1).equals(ResourceEnum.COIN)) {
                                nameFileMarble2 = "yellow_marble.jpg";
                            } else {
                                nameFileMarble2 = "gray_marble.jpg";
                            }
                        }
                    }
                    image = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/" + nameFileMarble2))));
                    image = new ImageIcon(getScaledImage(image.getImage(), 200, 250));
                    swapMarble2.setIcon(image);
                    swapMarble2.setBorderPainted(false);
                    swapMarble2.setContentAreaFilled(false);
                    swapMarble2.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));


                    swapMarble1.addActionListener(e -> {
                        ResourceEnum resourceEnumSelected = playerHandler.getWhiteMarbleLeaderAbility().get(0);
                        if (resources.containsKey(resourceEnumSelected)) {
                            int count = resources.get(resourceEnumSelected);
                            count = count + 1;
                            resources.replace(resourceEnumSelected, count);

                        } else {
                            resources.put(resourceEnumSelected, 1);
                        }
                        int countNone = resources.get(ResourceEnum.NONE);
                        countNone = countNone - 1;
                        resources.replace(ResourceEnum.NONE, countNone);
                        countWhiteMarble.setText("x" + resources.get(ResourceEnum.NONE));
                        gameFrame.validate();
                    });

                    swapMarble2.addActionListener(e -> {
                        ResourceEnum resourceEnumSelected = playerHandler.getWhiteMarbleLeaderAbility().get(0);
                        if (resources.containsKey(resourceEnumSelected)) {
                            int count = resources.get(resourceEnumSelected);
                            count = count + 1;
                            resources.replace(resourceEnumSelected, count);

                        } else {
                            resources.put(resourceEnumSelected, 1);
                        }
                        int countNone = resources.get(ResourceEnum.NONE);
                        countNone = countNone - 1;
                        resources.replace(ResourceEnum.NONE, countNone);
                        countWhiteMarble.setText("x" + resources.get(ResourceEnum.NONE));
                        gameFrame.validate();
                    });


                    JLabel titleChooseMarble = new JLabel("Select the marble for conversion");
                    gbc.gridx = 0;
                    gbc.gridy = 0;
                    gbc.gridwidth = 2;
                    gbc.gridheight = 1;
                    gbc.insets = new Insets(0, 0, 5, 0);
                    panelChooseConvertMarbleLeaderCard.add(titleChooseMarble, gbc);

                    gbc = new GridBagConstraints();
                    gbc.gridx = 0;
                    gbc.gridy = 1;
                    gbc.weightx = 0.4;
                    gbc.weighty = 0.4;
                    panelChooseConvertMarbleLeaderCard.add(swapMarble1, gbc);

                    gbc = new GridBagConstraints();
                    gbc.gridx = 1;
                    gbc.gridy = 1;
                    gbc.weightx = 0.4;
                    gbc.weighty = 0.4;
                    panelChooseConvertMarbleLeaderCard.add(swapMarble2, gbc);

                } catch (Exception e) {
                    e.printStackTrace();
                }


                JPanel button = new JPanel();
                button.add(new JButton("confirm") {{
                    setPreferredSize(new Dimension(150, 60));
                    addActionListener(e -> {
                        if (resources.get(ResourceEnum.NONE) == 0) {
                            showMenuHandleNewResourcesFromMarket(resources, warehouse);
                        } else {
                            JOptionPane.showMessageDialog(gameFrame,
                                    "You have to convert all the white marble",
                                    "Information",
                                    JOptionPane.INFORMATION_MESSAGE);
                        }
                    });
                }});
                gbc = new GridBagConstraints();
                gbc.gridx = 0;
                gbc.gridy = 2;
                gbc.gridwidth = 2;
                gbc.gridheight = 1;
                gbc.weightx = 0.1;
                gbc.weighty = 0.1;
                panelChooseConvertMarbleLeaderCard.add(button, gbc);

                container.add(panelChooseConvertMarbleLeaderCard, BorderLayout.CENTER);


                gameFrame.setContentPane(container);
                gameFrame.validate();
                gameFrame.repaint();
                gameFrame.setVisible(true);
            } else {


                gameFrame.setContentPane(container);
                gameFrame.validate();
                gameFrame.repaint();
                gameFrame.setVisible(true);


                showMenuHandleNewResourcesFromMarket(resources, warehouse);
            }
        }

    }

    public void showMenuHandleNewResourcesFromMarket(EnumMap<ResourceEnum, Integer> resources, Warehouse warehouse) {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        JPanel panel = new JPanel(new BorderLayout());

        JPanel panelTitle = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1;
        gbc.weighty = 1;
        JLabel title = new JLabel("Handle the new resources");
        panelTitle.add(title, gbc);
        panel.add(panelTitle, BorderLayout.PAGE_START);

        WarehousePanel wareHousePanel = new WarehousePanel(warehouse);
        panel.add(wareHousePanel, BorderLayout.LINE_START);

        ShowNewResourcesPanel showNewResourcesPanel = new ShowNewResourcesPanel(resources);
        panel.add(showNewResourcesPanel, BorderLayout.CENTER);

        JPanel panelButtonMenu = new JPanel(new GridBagLayout());

        JPanel buttonInsert = new JPanel();
        buttonInsert.add(new JButton("Insert the new resources") {{
            addActionListener(e -> askInsertWarehouse(resources, warehouse));
        }});

        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;

        gbc.weightx = 0.3;
        gbc.weighty = 0.3;
        gbc.ipadx = 15;
        gbc.ipady = 15;
        gbc.insets = new Insets(3, 0, 3, 0);
        panelButtonMenu.add(buttonInsert, gbc);

        if (warehouse.isEmpty()) {
            JPanel buttonDiscardAll = new JPanel();
            buttonDiscardAll.add(new JButton("Discard all resources") {{
                addActionListener(e -> discardRemainingResources(resources));
            }});

            gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 1;

            gbc.weightx = 0.3;
            gbc.weighty = 0.3;
            gbc.ipadx = 15;
            gbc.ipady = 15;
            gbc.insets = new Insets(3, 0, 3, 0);
            panelButtonMenu.add(buttonDiscardAll, gbc);
        } else {
            JPanel swapDepotButton = new JPanel();
            swapDepotButton.add(new JButton("Swap Depots") {{
                addActionListener(e -> askSwapDepots(resources, warehouse));
            }});

            gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 1;

            gbc.weightx = 0.3;
            gbc.weighty = 0.3;
            gbc.ipadx = 15;
            gbc.ipady = 15;
            gbc.insets = new Insets(3, 0, 3, 0);
            panelButtonMenu.add(swapDepotButton, gbc);

            JPanel buttonDiscardAll = new JPanel();
            buttonDiscardAll.add(new JButton("Discard all resources") {{
                addActionListener(e -> discardRemainingResources(resources));
            }});

            gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 2;

            gbc.weightx = 0.3;
            gbc.weighty = 0.3;
            gbc.ipadx = 15;
            gbc.ipady = 15;
            gbc.insets = new Insets(3, 0, 3, 0);
            panelButtonMenu.add(buttonDiscardAll, gbc);
        }
        panel.add(panelButtonMenu, BorderLayout.LINE_END);


        gameFrame.setContentPane(panel);
        gameFrame.validate();
        gameFrame.repaint();
        gameFrame.setVisible(true);
    }

    private void discardRemainingResources(EnumMap<ResourceEnum, Integer> newResourcesToDiscard) {

        sendToServer.sendDiscardResources(newResourcesToDiscard);

    }

    @Override
    public void askSwapDepots(EnumMap<ResourceEnum, Integer> resources, Warehouse warehouse) {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        JPanel contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

        contentPane.setLayout(new BorderLayout());

        JPanel btnBackHandleNewResource = new JPanel();
        btnBackHandleNewResource.add(new JButton("Back to the resource handler") {{
            setPreferredSize(new Dimension(200, 80));
            addActionListener(e -> askHandleNewResourceOrSwap(resources, warehouse));
        }});
        contentPane.add(btnBackHandleNewResource, BorderLayout.PAGE_START);

        WarehousePanel wareHousePanel = new WarehousePanel(warehouse);
        contentPane.add(wareHousePanel, BorderLayout.LINE_START);


        List<Integer> depotsSelected = new ArrayList<>();

        GridBagConstraints gbc = new GridBagConstraints();
        JPanel panelDepotButton = new JPanel(new GridBagLayout());
        Border internalBorder = BorderFactory.createTitledBorder("Select depots");
        Border externalBorder = BorderFactory.createEmptyBorder(2, 5, 5, 5);
        Border finalBorder = BorderFactory.createCompoundBorder(internalBorder, externalBorder);
        panelDepotButton.setBorder(finalBorder);


        JButton buttonDepot1 = new JButton("Depot 1");
        buttonDepot1.setPreferredSize(new Dimension(200, 70));
        buttonDepot1.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        buttonDepot1.addActionListener(e -> {

            if (depotsSelected.size() == 0) {
                depotsSelected.add(1);
                buttonDepot1.setBackground(Color.YELLOW);
            } else {
                if (!depotsSelected.contains(1)) {
                    if (depotsSelected.size() == 2) {
                        JOptionPane.showMessageDialog(gameFrame,
                                "You have to deselect another depot before",
                                "Alt",
                                JOptionPane.WARNING_MESSAGE);
                    } else {
                        depotsSelected.add(1);
                        buttonDepot1.setBackground(Color.YELLOW);
                    }

                } else {
                    depotsSelected.remove((Integer) 1);
                    buttonDepot1.setBackground(Color.WHITE);
                }
            }
        });
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.3;
        gbc.weighty = 0.3;
        gbc.insets = new Insets(3, 5, 5, 5);
        panelDepotButton.add(buttonDepot1, gbc);


        JButton buttonDepot2 = new JButton("Depot 2");
        buttonDepot2.setPreferredSize(new Dimension(200, 70));
        buttonDepot2.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        buttonDepot2.addActionListener(e -> {

            if (depotsSelected.size() == 0) {
                depotsSelected.add(2);
                buttonDepot2.setBackground(Color.YELLOW);
            } else {
                if (!depotsSelected.contains(2)) {
                    if (depotsSelected.size() == 2) {
                        JOptionPane.showMessageDialog(gameFrame,
                                "You have to deselect another depot before",
                                "Alt",
                                JOptionPane.WARNING_MESSAGE);
                    } else {
                        depotsSelected.add(2);
                        buttonDepot2.setBackground(Color.YELLOW);
                    }

                } else {
                    depotsSelected.remove((Integer) 2);
                    buttonDepot2.setBackground(Color.WHITE);
                }
            }
        });
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 0.3;
        gbc.weighty = 0.3;
        gbc.insets = new Insets(3, 5, 5, 5);
        panelDepotButton.add(buttonDepot2, gbc);


        JButton buttonDepot3 = new JButton("Depot 3");
        buttonDepot3.setPreferredSize(new Dimension(200, 70));
        buttonDepot3.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        buttonDepot3.addActionListener(e -> {

            if (depotsSelected.size() == 0) {
                depotsSelected.add(3);
                buttonDepot3.setBackground(Color.YELLOW);
            } else {
                if (!depotsSelected.contains(3)) {
                    if (depotsSelected.size() == 2) {
                        JOptionPane.showMessageDialog(gameFrame,
                                "You have to deselect another depot before",
                                "Alt",
                                JOptionPane.WARNING_MESSAGE);
                    } else {
                        depotsSelected.add(3);
                        buttonDepot3.setBackground(Color.YELLOW);
                    }
                } else {
                    depotsSelected.remove((Integer) 3);
                    buttonDepot3.setBackground(Color.WHITE);
                }
            }
        });
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 0.3;
        gbc.weighty = 0.3;
        gbc.insets = new Insets(3, 5, 5, 5);
        panelDepotButton.add(buttonDepot3, gbc);


        //layout
        gbc = new GridBagConstraints();


        //JBUTTON GBC
        JButton btnSwap = new JButton("Swap");

        gbc.gridx = 0;
        gbc.gridy = 3;

        gbc.weightx = 0.3; // peso
        gbc.weighty = 0.3; // peso

        gbc.anchor = GridBagConstraints.PAGE_START; // di default center

        gbc.ipadx = 20; //paddding interno del bottone
        gbc.ipady = 10;

        panelDepotButton.add(btnSwap, gbc);
        //FINE JBUTTON GBC

        btnSwap.setFont(new Font("Tahoma", Font.PLAIN, 20));
        btnSwap.addActionListener(e -> {
            int idxDepot1 = depotsSelected.get(0);
            int idxDepot2 = depotsSelected.get(1);

            if (idxDepot1 != idxDepot2 && idxDepot1 <= warehouse.getDepots().size() && idxDepot2 <= warehouse.getDepots().size()) {
                sendToServer.sendSwapDepotsRequest(idxDepot1, idxDepot2);
            } else {
                JOptionPane.showMessageDialog(gameFrame,
                        "Please indicate the corrects indexes of depots",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        });


        contentPane.add(panelDepotButton, BorderLayout.CENTER);

        gameFrame.setContentPane(contentPane);
        gameFrame.validate();
        gameFrame.repaint();
        gameFrame.setVisible(true);
    }

    @Override
    public void showWarehouse(Warehouse warehouse) {


//        ArrayList<Depot> depots = warehouse.getDepots();
//        ImageIcon image1;
//        ImageIcon image2;
//        ImageIcon image3;
//        ImageIcon image4;
//        ImageIcon image5 = null;
//        ArrayList<ImageIcon> images = new ArrayList<>();
//        try {
//            image1 = new ImageIcon(ImageIO.read(new File("src/main/resources/jpg/" + "shield.jpg")));
//            image1 = new ImageIcon(ImageUtil.getScaledImage(image1.getImage(), 70, 70));
//            images.add(image1);
//
//            image2 = new ImageIcon(ImageIO.read(new File("src/main/resources/jpg/" + "servant.jpg")));
//            image2 = new ImageIcon(ImageUtil.getScaledImage(image2.getImage(), 70, 70));
//            images.add(image2);
//
//            image3 = new ImageIcon(ImageIO.read(new File("src/main/resources/jpg/" + "coin.jpg")));
//            image3 = new ImageIcon(ImageUtil.getScaledImage(image3.getImage(), 70, 70));
//            images.add(image3);
//
//            image4 = new ImageIcon(ImageIO.read(new File("src/main/resources/jpg/" + "stone.jpg")));
//            image4 = new ImageIcon(ImageUtil.getScaledImage(image4.getImage(), 70, 70));
//            images.add(image4);
//
//            image5 = new ImageIcon(ImageIO.read(new File("src/main/resources/jpg/" + "none.jpg")));
//            image5 = new ImageIcon(ImageUtil.getScaledImage(image5.getImage(), 70, 70));
//            images.add(image5);
//
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        Container contain = gameFrame.getContentPane();
//        contain.removeAll();
//        gameFrame.getContentPane().setLayout(new FlowLayout());
//        JPanel contentPane = new JPanel();
//        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
//        contentPane.setLayout(new GridLayout(3, 3));
//        JLabel[][] grid = new JLabel[3][3];
//        boolean empty = false;
//        int occupied = 0;
//        for (int i = 0; i < 3; i++) {
//            for (int j = 0; j < 3; j++) {
//                int ord = depots.get(i).getResource().ordinal();
//
//                if (ord == 5) {
//                    empty = true;
//                }
//                if (empty == false) {
//                    occupied = depots.get(i).getAmountStored();
//                }
//                grid[i][j] = new JLabel();
//                grid[i][j].setText("");
//                if (j == 0) {
//                    grid[i][j].setText(i + ") ");
//                    grid[i][j].setVerticalTextPosition(JLabel.CENTER);
//                    grid[i][j].setHorizontalTextPosition(JLabel.LEFT);
//                }
//                grid[i][j].setBounds(200 + 100 * j, 200 + 100 * i, 100, 100);
//
//                if ((i == 0 && j == 1) || (i == 0 && j == 2) || (i == 1 && j == 2)) {
//                } else {
//                    if (empty == true) {
//                        grid[i][j].setIcon(image5);
//                    } else {
//                        if (j < occupied) {
//                            grid[i][j].setIcon(images.get(ord));
//                        } else {
//                            grid[i][j].setIcon(image5);
//                        }
//                    }
//                }
//                contentPane.add(grid[i][j]);
//            }
//        }
//        Border emp = BorderFactory.createEmptyBorder(30, 30, 30, 30);
//        Border blackLine = BorderFactory.createLineBorder(Color.black);
//        CompoundBorder line = new CompoundBorder(emp, blackLine);
//        Border grid1Border = BorderFactory.createTitledBorder(line, "Here's your updated warehouse :");
//        contentPane.setBorder(grid1Border);
//        gameFrame.getContentPane().add(contentPane);
//        gameFrame.pack();
//        gameFrame.validate();
//        gameFrame.repaint();
//        gameFrame.setVisible(true);
    }

    @Override
    public void confirmDiscard(TryInsert m) {
        int answer = JOptionPane.showConfirmDialog(gameFrame,
                "you will discard " + m.getToDiscard() + " " + m.getResource() + "(s) and consequently give " + m.getToDiscard() + " faith point(s) to all the other players",
                "Choose the action",
                JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_NO_OPTION)
            sendToServer.confirmInsert(m.getResource(), m.getQuantity() - m.getToDiscard(), m.getChosenDepot());
        else sendToServer.abortInsert();
    }

    @Override
    public void showTurnMoves() {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        JLabel contentPane;
        ImageIcon icon;

        try {
            icon = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/sfondo_completo.jpg"))));
            icon = new ImageIcon(ImageUtil.getScaledImage(icon.getImage(), 1288, 800));
        } catch (IOException e) {
            icon = null;
        }
        contentPane = new JLabel(icon);
        contentPane.setLayout(new GridLayout(6, 1));


        JLabel title = new JLabel("IT'S YOUR TURN, CHOOSE AN OPTION !", SwingConstants.RIGHT);
        title.setFont(new Font("Tahoma", Font.BOLD, 21));
        contentPane.add(new JPanel().add(title));

        JPanel button1 = new JPanel();
        button1.setOpaque(false);
        button1.add(new JButton("RESOURCE MARKET") {
            final ImageIcon icon = null;

            {
                setPreferredSize(new Dimension(300, 100));
                addActionListener(e -> sendToServer.sendResourceMarketRequest());
            }
        });
        contentPane.add(button1, Component.CENTER_ALIGNMENT);

        JPanel button2 = new JPanel();
        button2.setOpaque(false);
        button2.add(new JButton("CARD MARKET") {
            {
                setPreferredSize(new Dimension(300, 100));
                addActionListener(e -> sendToServer.sendCardMarketRequest());
            }
        });
        contentPane.add(button2, Component.CENTER_ALIGNMENT);
        JPanel button3 = new JPanel();
        button3.setOpaque(false);
        button3.add(new JButton("ACTIVATE PRODUCTION POWER") {
            {
                setPreferredSize(new Dimension(300, 100));
                addActionListener(e -> sendToServer.sendProductionPowerRequest());
            }
        });
        contentPane.add(button3, Component.CENTER_ALIGNMENT);
        JPanel button4 = new JPanel();
        button4.setOpaque(false);
        button4.add(new JButton("ACTIVATE LEADER") {
            {
                setPreferredSize(new Dimension(300, 100));
                addActionListener(e -> sendToServer.sendObtainLeaderCard(false, true));
            }
        });
        contentPane.add(button4, Component.CENTER_ALIGNMENT);
        JPanel button5 = new JPanel();
        button5.setOpaque(false);
        button5.add(new JButton("DISCARD LEADER") {
            {
                setPreferredSize(new Dimension(300, 100));
                addActionListener(e -> sendToServer.sendObtainLeaderCard(true, true));
            }
        });
        contentPane.add(button5, Component.CENTER_ALIGNMENT);

        gameFrame.setContentPane(contentPane);

        gameFrame.pack();

        gameFrame.validate();
        gameFrame.repaint();
        gameFrame.setVisible(true);


    }

    @Override
    public void showEndTurnMoves() {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        JLabel contentPane;
        ImageIcon icon;

        try {
            icon = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/sfondo_completo.jpg"))));
            icon = new ImageIcon(ImageUtil.getScaledImage(icon.getImage(), 1288, 800));
        } catch (IOException e) {
            icon = null;
        }
        contentPane = new JLabel(icon);
        contentPane.setLayout(new GridLayout(6, 1));


        JLabel title = new JLabel("BEFORE ENDING YOUR TURN, CHOOSE AN OPTION !", SwingConstants.RIGHT);
        title.setFont(new Font("Tahoma", Font.BOLD, 21));
        contentPane.add(new JPanel().add(title));


        JPanel button1 = new JPanel();
        button1.setOpaque(false);
        button1.add(new JButton("ACTIVATE LEADER") {
            {

                setPreferredSize(new Dimension(300, 100));
                addActionListener(e -> {
                    sendToServer.sendObtainLeaderCard(false, false);
                });
            }
        });
        contentPane.add(button1, Component.CENTER_ALIGNMENT);
        JPanel button2 = new JPanel();
        button2.setOpaque(false);
        button2.add(new JButton("DISCARD LEADER") {
            {
                setPreferredSize(new Dimension(300, 100));
                addActionListener(e -> {
                    sendToServer.sendObtainLeaderCard(true, false);
                });
            }
        });
        contentPane.add(button2, Component.CENTER_ALIGNMENT);
        JPanel button3 = new JPanel();
        button3.setOpaque(false);
        button3.add(new JButton("END TURN") {
            {
                setPreferredSize(new Dimension(300, 100));
                addActionListener(e -> {
                    sendToServer.endTurn();
                });
            }
        });
        contentPane.add(button3, Component.CENTER_ALIGNMENT);

        gameFrame.setContentPane(contentPane);

        gameFrame.validate();
        gameFrame.repaint();
        gameFrame.setVisible(true);

    }

    @Override
    public void elaborateSwapResult(String message, boolean success, Warehouse warehouse) {
        System.out.println();
        JOptionPane.showMessageDialog(gameFrame,
                "Swap Depot Action Result: \n" + message,
                "Swap Result",
                JOptionPane.INFORMATION_MESSAGE);
        if (success) {
            askHandleNewResourceOrSwap(ResourceMarketHandler.getToInsert(), warehouse);
        } else {
            askSwapDepots(ResourceMarketHandler.getToInsert(), warehouse);
        }
    }

    @Override
    public void showResourceMarketStructure(MarbleEnum[][] resourceMarketStructure) {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        gameFrame.getContentPane().setLayout(new FlowLayout());
        JPanel contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        contentPane.setLayout(new GridLayout(4, 5));
        JButton[][] grid = new JButton[4][5];
        //String[][] paths= new String[3][4];
        ImageIcon image = null;
        String marble;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 5; j++) {
                if (i == 3) {
                    grid[i][j] = new JButton();
                    int colIndex = j;
                    grid[i][j].addActionListener(e -> sendToServer.sendSelectedResourceFromMarket(TypeLineEnum.COL, colIndex));
                    marble = "col_insertion";
                } else if (j == 4) {
                    grid[i][j] = new JButton();
                    int rowIndex = i;
                    grid[i][j].addActionListener(e -> sendToServer.sendSelectedResourceFromMarket(TypeLineEnum.ROW, rowIndex));
                    marble = "row_insertion";


                } else {
                    grid[i][j] = new JButton();
                    grid[i][j].setEnabled(false);
                    marble = resourceMarketStructure[i][j].toString().toLowerCase();
                    marble += "_marble";
                }
                try {
                    image = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/" + marble + ".jpg"))));
                    image = new ImageIcon(getScaledImage(image.getImage(), 100, 100));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if ((i != 3) && (j != 4)) {
                    grid[i][j].setDisabledIcon(image);
                }
                if (i == 3 && j == 4) {
                    grid[i][j].setVisible(false);
                }
                grid[i][j].setIcon(image);
                contentPane.add(grid[i][j]);
            }
        }
        Border emp = BorderFactory.createEmptyBorder(20, 20, 20, 20);
        Border blackLine = BorderFactory.createLineBorder(Color.black);
        CompoundBorder line = new CompoundBorder(emp, blackLine);
        Border grid1Border = BorderFactory.createTitledBorder(line, "Click one of the insertion arrows :");
        contentPane.setBorder(grid1Border);
        gameFrame.getContentPane().add(contentPane);
        gameFrame.validate();
        gameFrame.repaint();
        gameFrame.setVisible(true);

    }

    @Override
    public void showNewResourcesManagementRequest() {
        System.out.println("NO MORE USEFUL");
    }

    @Override
    public void showWaitSetup(int playersReady, int total) {
        String popUpMessage;
        Container container = gameFrame.getContentPane();
        container.removeAll();
        GridBagConstraints gbc = new GridBagConstraints();

        JPanel waitSetupPane = new JPanel(new GridBagLayout());

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.CENTER;

        if (playersReady != -1)
            popUpMessage = playersReady + "/" + total + " are ready, please wait";
        else popUpMessage = "wait for other players to end their setup please";

        JLabel waitLabel = new JLabel(popUpMessage);

        waitSetupPane.add(waitLabel, gbc);

        gameFrame.setContentPane(waitSetupPane);

        gameFrame.revalidate();

        JOptionPane.showMessageDialog(gameFrame,
                popUpMessage,
                "Please wait",
                JOptionPane.INFORMATION_MESSAGE);

    }

    @Override
    public void showProductionPowers(List<ProductionPower> playerProductionPowers) {

        class SelectedPowerAction extends AbstractAction {
            private final int productionIndex;

            public SelectedPowerAction(int productionIndex) {
                super();
                this.productionIndex = productionIndex;
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                sendToServer.sendTryUseProductionPower(playerProductionPowers.get(productionIndex));
                ProductionPowersHandler.setCurrentProductionPower(playerProductionPowers.get(productionIndex));
            }
        }

        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        JPanel productionPowerPane = new JPanel(new GridBagLayout());
        JPanel pane = new JPanel(new GridBagLayout());
        GridBagConstraints gbc;

        JLabel infoLabel = new JLabel("Select a production power to use!");
        infoLabel.setFont(new Font("Tahoma", Font.BOLD, 21));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;

        pane.add(infoLabel, gbc);

        JButton selectProductionPowerButton, stopButton;

        for (int i = 0; i < playerProductionPowers.size(); i++) {
            selectProductionPowerButton = new JButton();
            selectProductionPowerButton.add(new ProductionPowerPanel(playerProductionPowers.get(i)));
            selectProductionPowerButton.addActionListener(new SelectedPowerAction(i));

            gbc = new GridBagConstraints();

            if (i == 0) {
                gbc.gridx = 0;
                gbc.gridy = 1;
            } else {
                gbc.gridx = 1;
                gbc.gridy = i - 1;
            }

            productionPowerPane.add(selectProductionPowerButton, gbc);
        }

        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weighty = 0.5;
        gbc.weightx = 0.5;
        pane.add(productionPowerPane, gbc);

        stopButton = new JButton("finish");
        stopButton.addActionListener(e -> sendToServer.insertObtainedResources());

        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weighty = 0.2;
        gbc.weightx = 0.2;
        if (!PlayerHandler.isAlreadyProductionActivated()) {
            stopButton.setVisible(false);
        }
        pane.add(stopButton, gbc);

        JPanel button1 = new JPanel();
        button1.setOpaque(false);
        button1.add(new JButton("GO TO MAIN MENU") {
            {
                setPreferredSize(new Dimension(200, 75));
                addActionListener(e -> {
                    showTurnMoves();
                });
            }
        });
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weighty = 0.2;
        gbc.weightx = 0.2;
        if (PlayerHandler.isAlreadyProductionActivated()) {
            button1.setVisible(false);
        }
        pane.add(button1, gbc);

        gameFrame.setContentPane(pane);

        gameFrame.validate();
    }

    @Override
    public void askPayLocation(ChooseResourceLocation m) {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        JPanel pane = new JPanel();
        pane.add(new PayPanel(gameFrame, sendToServer, m.getToPay(), m.getPlayerWarehouse(), m.getPlayerStrongbox()));
        gameFrame.setContentPane(pane);
        gameFrame.validate();
    }

    @Override
    public void showStrongbox(Strongbox playerStrongbox) {

        // C'è sTRONGBOXPANEL --> USO QUELLO

        //gridlayout, con icone delle risorse e di fianco le qunatità
//        System.out.println("here's your updated strongbox");
//        ResourceEnum[] strongboxResources = Arrays.copyOfRange(ResourceEnum.values(), 0, 4);
//        ImageIcon imageShield = null;
//        ImageIcon imageServants = null;
//        ImageIcon imageCoin = null;
//        ImageIcon imageStone = null;
//        try {
//            imageShield = new ImageIcon(ImageIO.read(new File("src/main/resources/jpg/" + "shield.jpg")));
//            imageShield = new ImageIcon(getScaledImage(imageShield.getImage(), 70, 70));
//            images.add(imageShield);
//
//            imageServants = new ImageIcon(ImageIO.read(new File("src/main/resources/jpg/" + "servant.jpg")));
//            imageServants = new ImageIcon(getScaledImage(imageServants.getImage(), 70, 70));
//            images.add(imageServants);
//
//            imageCoin = new ImageIcon(ImageIO.read(new File("src/main/resources/jpg/" + "coin.jpg")));
//            imageCoin = new ImageIcon(getScaledImage(imageCoin.getImage(), 70, 70));
//            images.add(imageCoin);
//
//            imageStone = new ImageIcon(ImageIO.read(new File("src/main/resources/jpg/" + "stone.jpg")));
//            imageStone = new ImageIcon(getScaledImage(imageStone.getImage(), 70, 70));
//            images.add(imageStone);
//
//        } catch (Exception e) {
//            System.out.println("missing a image");
//        }
//
//        int countShield = (int) Arrays.stream(strongboxResources).filter(x -> x.equals(ResourceEnum.SHIELD)).count();
//        int countServant = (int) Arrays.stream(strongboxResources).filter(x -> x.equals(ResourceEnum.SERVANT)).count();
//        int countCoin = (int) Arrays.stream(strongboxResources).filter(x -> x.equals(ResourceEnum.COIN)).count();
//        int countStone = (int) Arrays.stream(strongboxResources).filter(x -> x.equals(ResourceEnum.STONE)).count();
//
//        JPanel panelStrongbox = new JPanel();
//        panelStrongbox.setLayout(new GridBagLayout());
//        GridBagConstraints gbc = new GridBagConstraints();
//
//        //IMAGESHIELD GBC
//        gbc.gridx = 0;
//        gbc.gridy = 0;
//
//        gbc.weightx = 0.01; // peso
//        gbc.weighty = 0.01; // peso
//
//        //gbc.insets = new Insets(0,0,0,5); margine
//        gbc.anchor = GridBagConstraints.LINE_START;
//        JLabel picLabel = new JLabel(imageShield);
//
//        panelStrongbox.add(picLabel, gbc);
//        //FINE GBC IMAGESHIELD
//
//        //IMAGECOIN GBC
//        gbc.gridx = 0;
//        gbc.gridy = 1;
//
//        gbc.weightx = 0.01; // peso
//        gbc.weighty = 0.01; // peso
//
//        gbc.anchor = GridBagConstraints.LINE_START;
//        picLabel = new JLabel(imageCoin);
//
//        panelStrongbox.add(picLabel, gbc);
//        //FINE GBC IMAGECOIN
//
//        //IMAGESERVANT GBC
//        gbc.gridx = 0;
//        gbc.gridy = 2;
//
//        gbc.weightx = 0.01; // peso
//        gbc.weighty = 0.01; // peso
//
//        gbc.anchor = GridBagConstraints.LINE_START;
//        picLabel = new JLabel(imageServants);
//
//        panelStrongbox.add(picLabel, gbc);
//        //FINE GBC IMAGESERVANT
//
//        //IMAGESTONE GBC
//        gbc.gridx = 0;
//        gbc.gridy = 3;
//
//        gbc.weightx = 0.01; // peso
//        gbc.weighty = 0.01; // peso
//
//        gbc.anchor = GridBagConstraints.LINE_START;
//        picLabel = new JLabel(imageStone);
//        panelStrongbox.add(picLabel, gbc);
//        //FINE GBC IMAGESTONE

    }

    @Override
    public void notEnoughResources(List<Requirement> requirements, ActionEnum action) {
        switch (action) {
            case PRODUCTION_POWER:
                JOptionPane.showMessageDialog(gameFrame,
                        "You can't use the production power, cause you're missing the following requirements:" + requirements.toString(),
                        "Attention",
                        JOptionPane.WARNING_MESSAGE);
                showProductionPowers(ProductionPowersHandler.getProductionPowers());
                break;
            case BUY_CARD:
                if(!requirements.isEmpty())
                {
                    JOptionPane.showMessageDialog(gameFrame,
                            "You can't buy this development card, cause you're missing the following requirements:" + requirements.toString(),
                            "Attention",
                            JOptionPane.WARNING_MESSAGE);
                }else{
                    JOptionPane.showMessageDialog(gameFrame,
                            "The level is too high for your slots",
                            "Attention",
                            JOptionPane.WARNING_MESSAGE);
                }
                break;
            case LEADER_ACTIVATION:
                JOptionPane.showMessageDialog(gameFrame,
                        "You can't activate this leader card, cause you're missing the following requirements:" + requirements.toString(),
                        "Attention",
                        JOptionPane.WARNING_MESSAGE);
                break;
        }

    }

    public void notEnoughResourcesActivateLeaderCard(List<Requirement> requirements, Boolean isStartTurn) {
        JOptionPane.showMessageDialog(gameFrame,
                "You can't activate this leader card, cause you're missing the following requirements:" + requirements.toString(),
                "Attention",
                JOptionPane.WARNING_MESSAGE);
    }

    @Override
    public void showObtainedResources(EnumMap<ResourceEnum, Integer> obtainedResources) {
        JOptionPane.showMessageDialog(gameFrame,
                "You successfully used the production power and obtained the following resources:" + obtainedResources,
                "Production Used",
                JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void askJollyResources(EnumMap<ResourceEnum, Integer> obtainedResources, boolean isBaseProductionPower) {
        JDialog askObtainedJollyDialog = new JDialog(gameFrame, "Choose the jolly resource", Dialog.ModalityType.APPLICATION_MODAL);

        int toChoose = obtainedResources.get(ResourceEnum.JOLLY);


        class ChooseJollyResourceAction extends AbstractAction {
            private final ResourceEnum resourceSelected;
            private final int quantity;

            public ChooseJollyResourceAction(ResourceEnum resourceSelected, int quantity) {
                this.resourceSelected = resourceSelected;
                this.quantity = quantity;
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(askObtainedJollyDialog, "you choose to take " + resourceSelected);
                sendToServer.sendJollyResource(resourceSelected, quantity);

                obtainedResources.remove(ResourceEnum.JOLLY);
                if (obtainedResources.containsKey(resourceSelected))
                    obtainedResources.put(resourceSelected, obtainedResources.get(resourceSelected) + quantity);
                else obtainedResources.put(resourceSelected, quantity);

                askObtainedJollyDialog.dispose();
            }
        }


        int minResValue = 0;
        int maxResValue = isBaseProductionPower ? 4 : 5;

        ResourceEnum[] resources = Arrays.copyOfRange(ResourceEnum.values(), minResValue, maxResValue);

        GridBagConstraints gbc;
        JPanel chooseResourcePanel = new JPanel(new GridBagLayout());
        JButton chosenResourceButton;
        ImageIcon icon = null;
        JLabel iconLabel, chooseResourceInfo;
        ChooseJollyResourceAction action;

        chooseResourceInfo = new JLabel("select which resource you want to take as a jolly");

        gbc = new GridBagConstraints();

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = resources.length;

        chooseResourcePanel.add(chooseResourceInfo, gbc);

        for (int i = 0; i < resources.length; i++) {
            try {
                icon = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/" + resources[i].toString().toLowerCase() + ".jpg"))));
                icon = new ImageIcon(getScaledImage(icon.getImage(), 55, 55));
            } catch (IOException e) {
                e.printStackTrace();
            }

            chosenResourceButton = new JButton();
            chosenResourceButton.setLayout(new GridBagLayout());
            chosenResourceButton.setContentAreaFilled(false);

            action = new ChooseJollyResourceAction(resources[i], toChoose);
            chosenResourceButton.addActionListener(action);

            gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 0;
            iconLabel = new JLabel(icon);

            chosenResourceButton.add(iconLabel, gbc);

            gbc = new GridBagConstraints();
            gbc.gridx = i;
            gbc.gridy = 1;

            chooseResourcePanel.add(chosenResourceButton, gbc);
        }

        askObtainedJollyDialog.add(chooseResourcePanel);
        askObtainedJollyDialog.pack();

        askObtainedJollyDialog.setVisible(true);
    }

    @Override
    public void showGameOver(GameOver m) {
        if (m.isWinner()) {
            JOptionPane.showMessageDialog(gameFrame,
                    "CONGRATULATIONS, YOU WON THE GAME!!",
                    "END GAME",
                    JOptionPane.INFORMATION_MESSAGE);
            System.out.println();
        } else if (m.getWinnerPlayer() == null) {
            JOptionPane.showMessageDialog(gameFrame,
                    "I'm sorry, but " + "Lorenzo il Magnifico" + " has won the game :(",
                    "END GAME",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(gameFrame,
                    "i'm sorry, but " + m.getWinnerPlayerNickname() + " has won the game :(",
                    "END GAME",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        gameFrame.dispose();
    }

    @Override
    public void selectLeaderCardToDiscard(GetLeaderCard m) {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        gameFrame.getContentPane().setLayout(new GridBagLayout());
        JPanel contentPane = new JPanel();
        JButton[] buttons = new JButton[2];
        ImageIcon image = null;
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        boolean isAnyLeaderCardAvailable = (m.getAvailableLeaderCard().size() > 0);
        if (isAnyLeaderCardAvailable) {
            for (int i = 0; i < m.getAvailableLeaderCard().size(); i++) {
                buttons[i] = new JButton();
                int finalI = i;
                buttons[i].addActionListener(e -> sendToServer.sendDiscardLeaderCard(m.isDiscardAction(), m.isStartTurn(), m.getAvailableLeaderCard().get(finalI)));
                try {
                    image = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/" + m.getAvailableLeaderCard().get(finalI).getPath() + ".jpg"))));
                    image = new ImageIcon(getScaledImage(image.getImage(), 200, 300));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                buttons[i].setIcon(image);
                contentPane.add(buttons[i]);
            }
            Border emp = BorderFactory.createEmptyBorder(20, 20, 20, 20);
            Border blackLine = BorderFactory.createLineBorder(Color.black);
            CompoundBorder line = new CompoundBorder(emp, blackLine);
            Border grid1Border = BorderFactory.createTitledBorder(line, "Click the Leader Card you want to discard :");
            contentPane.setBorder(grid1Border);
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 0;
            gbc.weightx = 0.7;
            gbc.weighty = 0.7;
            gameFrame.getContentPane().add(contentPane, gbc);
            JPanel button1 = new JPanel();
            button1.setOpaque(false);
            button1.add(new JButton("GO TO MAIN MENU") {
                {
                    setPreferredSize(new Dimension(200, 75));
                    addActionListener(e -> {
                        showTurnMoves();
                    });
                }
            });
            gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 1;
            gbc.weightx = 0.1;
            gbc.weighty = 0.1;
            gameFrame.getContentPane().add(button1, gbc);

            gameFrame.validate();
            gameFrame.repaint();
            gameFrame.setVisible(true);


        } else {
            JOptionPane.showMessageDialog(gameFrame,
                    "You do not have any Leader Card to discard.",
                    "Invalid Request",
                    JOptionPane.ERROR_MESSAGE);

            if (m.isStartTurn()) {
                showTurnMoves();
            } else {
                showEndTurnMoves();
            }

        }

    }

    @Override
    public void selectLeaderCardToActivate(GetLeaderCard m) {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();
        gameFrame.getContentPane().setLayout(new GridBagLayout());
        JPanel contentPane = new JPanel();
        JButton[] buttons = new JButton[2];
        ImageIcon image = null;
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        boolean isAnyLeaderCardAvailable = (m.getAvailableLeaderCard().size() > 0);
        if (isAnyLeaderCardAvailable) {
            for (int i = 0; i < m.getAvailableLeaderCard().size(); i++) {
                buttons[i] = new JButton();
                int finalI = i;
                buttons[i].addActionListener(e -> sendToServer.sendActivateLeaderCard(m.isDiscardAction(), m.isStartTurn(), m.getAvailableLeaderCard().get(finalI)));
                try {
                    image = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/" + m.getAvailableLeaderCard().get(finalI).getPath() + ".jpg"))));
                    image = new ImageIcon(getScaledImage(image.getImage(), 200, 300));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                buttons[i].setIcon(image);
                contentPane.add(buttons[i]);
            }
            Border emp = BorderFactory.createEmptyBorder(20, 20, 20, 20);
            Border blackLine = BorderFactory.createLineBorder(Color.black);
            CompoundBorder line = new CompoundBorder(emp, blackLine);
            Border grid1Border = BorderFactory.createTitledBorder(line, "Click the Leader Card you want to activate :");
            contentPane.setBorder(grid1Border);
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 0;
            gbc.weightx = 0.7;
            gbc.weighty = 0.7;
            gameFrame.getContentPane().add(contentPane, gbc);
            JPanel button1 = new JPanel();
            button1.setOpaque(false);
            button1.add(new JButton("GO TO MAIN MENU") {
                {
                    setPreferredSize(new Dimension(200, 75));
                    addActionListener(e -> {
                        showTurnMoves();
                    });
                }
            });
            gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 1;
            gbc.weightx = 0.1;
            gbc.weighty = 0.1;
            gameFrame.getContentPane().add(button1, gbc);
            gameFrame.validate();
            gameFrame.repaint();
            gameFrame.setVisible(true);


        } else {
            JOptionPane.showMessageDialog(gameFrame,
                    "You do not have any Leader Card to activate.",
                    "Invalid Request",
                    JOptionPane.ERROR_MESSAGE);

            if (m.isStartTurn()) {
                showTurnMoves();
            } else {
                showEndTurnMoves();
            }

        }

    }

    @Override
    public void showStatusDiscardLeaderCard(DiscardLeaderCard m) {

        if (m.getSucccessDiscard()) {
            JOptionPane.showMessageDialog(gameFrame,
                    "leader card correctly discarded, you obtained a faith point",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(gameFrame,
                    "impossible to discard this leader card",
                    "Error ",
                    JOptionPane.ERROR_MESSAGE);
        }


        if (m.getIsStartTurn()) {
            showTurnMoves();
        } else {
            showEndTurnMoves();
        }
    }

    @Override
    public void showStatusActivateLeaderCard(ActivateLeaderCard m) {
        if (m.getSuccessActivate()) {
            JOptionPane.showMessageDialog(gameFrame,
                    "leader card correctly activated, from now on you can use its special effect",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
            playerHandler.setDiscountLeaderAbility(m.getDiscountLeaderCardAbilities());
            playerHandler.setWhiteMarbleLeaderAbility(m.getWhiteMarbleLeaderCardAbilities());
        } else {
            JOptionPane.showMessageDialog(gameFrame,
                    "impossible to activate this leader card",
                    "Error ",
                    JOptionPane.ERROR_MESSAGE);
        }

        if (m.getIsStartTurn()) {
            showTurnMoves();
        } else {
            showEndTurnMoves();
        }
    }

    @Override
    public void showCardMarketStructure(CardDeck[][] cardMarketStructure, Warehouse playerWarehouse, Strongbox playerStrongbox) {
        Container contain = gameFrame.getContentPane();
        contain.removeAll();

        JPanel contentPane = new JPanel(new GridBagLayout());

        GridBagConstraints gbc;

        JPanel marketPanel = new JPanel();
        marketPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        marketPanel.setLayout(new GridLayout(3, 4));
        JButton[][] grid = new JButton[3][4];

        for (int i = cardMarketStructure.length - 1; i >= 0; i--) {
            for (int j = cardMarketStructure[i].length - 1; j >= 0; j--) {
                grid[i][j] = new JButton();
                if (cardMarketStructure[i][j].getSize() > 0) {
                    grid[i][j].add(new CardPanel(cardMarketStructure[i][j].peek()));
                } else {
                    grid[i][j].add(new CardPanel());
                    grid[i][j].setEnabled(false);
                }
                int finalI = i;
                int finalJ = j;
                grid[i][j].addActionListener(e -> sendToServer.sendSelectedCardFromMarket(cardMarketStructure[finalI][finalJ].peek().getLevel().ordinal() - 1, cardMarketStructure[finalI][finalJ].peek().getType().ordinal()));

                marketPanel.add(grid[i][j]);
            }
        }


        Border emp = BorderFactory.createEmptyBorder(20, 20, 20, 20);
        Border blackLine = BorderFactory.createLineBorder(Color.black);
        CompoundBorder line = new CompoundBorder(emp, blackLine);
        Border grid1Border = BorderFactory.createTitledBorder(line, "Choose a development card :");
        marketPanel.setBorder(grid1Border);

        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;

        contentPane.add(marketPanel, gbc);

        JPanel buttonPanel = new JPanel();

        JButton backToMainMenu = new JButton("Go back to main menu");
        backToMainMenu.addActionListener(e -> showTurnMoves());

        Border emptyBorder = new EmptyBorder(20, 0,0,0);

        buttonPanel.add(backToMainMenu);

        buttonPanel.setBorder(emptyBorder);

        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;

        contentPane.add(buttonPanel, gbc);


        gameFrame.setContentPane(contentPane);
        gameFrame.pack();
        gameFrame.validate();
    }


//    @Override
//    public void showCardMarketStructure(CardDeck[][] cardMarketStructure, Warehouse playerWarehouse, Strongbox playerStrongbox) {
//        Container contain = gameFrame.getContentPane();
//        contain.removeAll();
//        gameFrame.getContentPane().setLayout(new FlowLayout());
//        JPanel contentPane = new JPanel();
//        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
//        contentPane.setLayout(new GridLayout(3, 4));
//        JButton[][] grid = new JButton[3][4];
//        String[][] paths = new String[3][4];
//        ImageIcon image = null;
//        for (int i = 0; i < cardMarketStructure.length; i++) {
//            for (int j = 0; j < cardMarketStructure[i].length; j++) {
//                grid[i][j] = new JButton();
//                if (cardMarketStructure[i][j].getSize() > 0) {
//                    paths[i][j] = cardMarketStructure[i][j].peek().getPath();
//                } else {
//                    paths[i][j] = "empty_deck";
//                    grid[i][j].setEnabled(false);
//
//                }
//                try {
//                    image = new ImageIcon(ImageIO.read(new File("src/main/resources/jpg/" + paths[i][j] + ".jpeg")));
//                    image = new ImageIcon(ImageUtil.getScaledImage(image.getImage(), 150, 230));
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }
//                grid[i][j].setIcon(image);
//                if (cardMarketStructure[i][j].getSize() <= 0) {
//                    grid[i][j].setDisabledIcon(image);
//                }
//                int finalI = i;
//                int finalJ = j;
//                grid[i][j].addActionListener(e -> {
////                    System.out.println("i :" +finalI);
////                    System.out.println("j :"+finalJ);
////                    System.out.println("level :"+cardMarketStructure[finalI][finalJ].peek().getLevel().ordinal());
////                    System.out.println("color :"+cardMarketStructure[finalI][finalJ].peek().getType().ordinal());
//                    sendToServer.sendSelectedCardFromMarket(cardMarketStructure[finalI][finalJ].peek().getLevel().ordinal(), cardMarketStructure[finalI][finalJ].peek().getType().ordinal());
//                });
//
//                contentPane.add(grid[i][j]);
//            }
//        }
//        Border emp = BorderFactory.createEmptyBorder(20, 20, 20, 20);
//        Border blackLine = BorderFactory.createLineBorder(Color.black);
//        CompoundBorder line = new CompoundBorder(emp, blackLine);
//        Border grid1Border = BorderFactory.createTitledBorder(line, "Choose a development card :");
//        contentPane.setBorder(grid1Border);
//        gameFrame.getContentPane().add(contentPane);
////        gameFrame.setContentPane(contentPane);
//        gameFrame.pack();
//        gameFrame.validate();
//        gameFrame.repaint();
//        gameFrame.setVisible(true);
//
//
//    }


    @Override
    public void showNewCardsManagementRequest() {


    }

    @Override
    public void showBoughtCard(DevelopmentCard boughtCard) {
        CardPanel cardPanel = new CardPanel(boughtCard);
        JOptionPane.showMessageDialog(gameFrame,
                cardPanel,
                "Card successfully bought",
                JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void showDevSlots(DevelopmentSlots slots) {
        ImageIcon empty = null;
        try {
            empty = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/empty_deck.jpg"))));
            empty = new ImageIcon(getScaledImage(empty.getImage(), 200, 260));
        } catch (Exception e) {
            e.printStackTrace();
        }
        JPanel panel = new JPanel(new GridLayout(1, 3));
        for (int i = 0; i < DevelopmentSlots.getMaxSize(); i++) {
            if (slots.getSlot(i).size() > 0) {
                panel.add(new CardPanel(slots.getSlot(i).getLast()));
            } else {
                panel.add(new JLabel(empty));
            }
        }
        JOptionPane.showMessageDialog(gameFrame,
                panel,
                "Card successfully bought",
                JOptionPane.PLAIN_MESSAGE);

    }

    @Override
    public void askSlotToInsert(DevelopmentSlots slots, DevelopmentCard boughtCard) {
        JDialog askSlotDialog = new JDialog(gameFrame, "insert the card you just bought", Dialog.ModalityType.APPLICATION_MODAL);
        GridBagConstraints gbc;

        JPanel contentPane = new JPanel(new GridBagLayout());
        JLabel info = new JLabel("Choose a slot where to insert the card you just bought!");

        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;

        contentPane.add(info, gbc);

        JPanel slotPane = new JPanel(new GridBagLayout());

        JButton slotButton;

        for (int i = 0; i < DevelopmentSlots.maxSize; i++) {
            Deque<DevelopmentCard> slot = slots.getSlot(i);

            slotButton = new JButton();
            if (slots.getSlot(i).size() > 0) {
                DevelopmentCard lastCard = slot.getLast();
                slotButton.add(new CardPanel(lastCard));
                if (lastCard.getLevel() == LevelEnum.THREE)
                    slotButton.setEnabled(false);
            } else {
                ImageIcon icon = null;
                try {
                    icon = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("jpg/empty_deck.jpg"))));
                    icon = new ImageIcon(getScaledImage(icon.getImage(), 200, 260));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                JLabel emptyLabel = new JLabel(icon);
                slotButton.add(emptyLabel);
            }

            int finalI = i;
            slotButton.addActionListener(e -> {
                sendToServer.sendSelectedSlotToInsertCard(finalI);
                askSlotDialog.dispose();
            });

            gbc = new GridBagConstraints();
            gbc.gridx = i;
            gbc.gridy = 0;

            slotPane.add(slotButton, gbc);
        }

        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;

        contentPane.add(slotPane, gbc);

        askSlotDialog.add(contentPane);
        askSlotDialog.pack();
        askSlotDialog.setVisible(true);
    }

    @Override
    public void showInvalidInsertion(String errorMessage) {
        JOptionPane.showMessageDialog(gameFrame,
                errorMessage,
                "Invalid Insertion",
                JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showFaithTrack(FaithTrack updatedFaithTrack, boolean lorenzo) {
        JOptionPane.showMessageDialog(null, new FaithTrackPanel(updatedFaithTrack, lorenzo), "Information", JOptionPane.INFORMATION_MESSAGE);

    }

    @Override
    public void showTotalVictoryPoints(int victoryPoints) {
        JOptionPane.showMessageDialog(gameFrame,
                "You achieved " + victoryPoints + " in this game",
                "Total Victory Points",
                JOptionPane.INFORMATION_MESSAGE);

    }

    @Override
    public void showLorenzoActionToken(ActionToken lorenzoToken) {
        JOptionPane.showMessageDialog(gameFrame,
                "Lorenzo picked the following action: " + lorenzoToken.toString(),
                "Lorenzo's Pick",
                JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void waitYourTurn(int playerTurn, String nickname) {
        Container container = gameFrame.getContentPane();
        container.removeAll();
        GridBagConstraints gbc = new GridBagConstraints();

        JPanel waitSetupPane = new JPanel(new GridBagLayout());

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.CENTER;

        JLabel waitLabel = new JLabel("The player " + nickname + " number " + (playerTurn + 1) + " is starting his turn, please wait that he finishes");

        waitSetupPane.add(waitLabel, gbc);

        gameFrame.setContentPane(waitSetupPane);

        gameFrame.revalidate();

        JOptionPane.showMessageDialog(gameFrame,
                "The player " + nickname + " number " + (playerTurn + 1) + " is starting his turn, please wait that he finishes",
                "Please wait",
                JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void emptyDeck() {
        JOptionPane.showMessageDialog(gameFrame,
                "You tried to buy a development card from an empty deck!",
                "Attention",
                JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showWrongDepot() {
        JOptionPane.showMessageDialog(gameFrame,
                "there is a depot with that resource in it, choose another one please",
                "Attention",
                JOptionPane.ERROR_MESSAGE
        );
    }


}
